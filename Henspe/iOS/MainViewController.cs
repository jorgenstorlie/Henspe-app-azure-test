// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using CoreGraphics;
using Foundation;
using Henspe.Core.Model.Dto;
using Henspe.iOS.Const;
using UIKit;

namespace Henspe.iOS
{
	public partial class MainViewController : UIViewController
	{
		private MainListTableViewSource mainListTableViewSource = null;

		// Events
        NSObject observerActivatedOccured;

		public MainViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            //this.Title = Foundation.NSBundle.MainBundle.LocalizedString("Kystvarsel.Title", null);

            SetupView();

            // Events
            //observerActivatedOccured = NSNotificationCenter.DefaultCenter.AddObserver(new NSString(EventsConst.activatedOccured), HandleActivatedOccured);
        }

        /*
        public void HandleActivatedOccured(NSNotification notification)
        {
            DoCallKystvarsel();
        }
        */

        public override void ViewDidUnload()
        {
            base.ViewDidUnload();
        }

        public override void WillMoveToParentViewController(UIViewController parent)
        {
            base.WillMoveToParentViewController(parent);
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
        }

        private void SetupView()
        {
            // Table setup
            mainListTableViewSource = new MainListTableViewSource(this);
            myTableView.Source = mainListTableViewSource;
            myTableView.BackgroundColor = UIColor.Clear;
			myTableView.SeparatorColor = UIColor.Clear;
            this.AutomaticallyAdjustsScrollViewInsets = false;

			mainListTableViewSource.sectionsWithRows = AppDelegate.current.structure;

            myTableView.ReloadData();
        }
    }

    // Table view source
    public partial class MainListTableViewSource : UITableViewSource
    {
		private int headerHeight = 70;
		private WeakReference<MainViewController> _parent;

        public StructureDto sectionsWithRows;

		public MainListTableViewSource(MainViewController controller)
        {
			_parent = new WeakReference<MainViewController>(controller);
        }

        // UITablViewSource methods
        public override nint NumberOfSections(UITableView tableView)
        {
            if (sectionsWithRows != null)
            {
				return sectionsWithRows.structureSectionList.Count;
            }
            else
            {
                return 0;
            }
        }

        public override nint RowsInSection(UITableView tableview, nint section)
        {
			if(sectionsWithRows.structureSectionList != null && sectionsWithRows.structureSectionList.Count > 0)
			{
				StructureSectionDto structureSection = sectionsWithRows.structureSectionList[(int)section];

				if (structureSection.structureElementList != null && structureSection.structureElementList.Count > 0)
				{
					return structureSection.structureElementList.Count;
				}
				else
				{
					return 0;
				}               
			}
			else
			{
				return 0;
			}
        }

        public override nfloat GetHeightForHeader(UITableView tableView, nint section)
        {
			if (sectionsWithRows.structureSectionList != null && sectionsWithRows.structureSectionList.Count > 0)
            {
                StructureSectionDto structureSection = sectionsWithRows.structureSectionList[(int)section];

                if (structureSection.structureElementList != null && structureSection.structureElementList.Count > 0)
                {
					return headerHeight;
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }

        public override UIView GetViewForHeader(UITableView tableView, nint section)
        {
			StructureSectionDto structureSection = null;

			if (sectionsWithRows.structureSectionList != null && sectionsWithRows.structureSectionList.Count > 0)
			{
				structureSection = sectionsWithRows.structureSectionList[(int)section];
			}
			else
			{
				return null;
			}

            CGRect headerframe = new CGRect(0, 0, tableView.Bounds.Size.Width, headerHeight);
            UIView headerView = new UIView(headerframe);

			headerView.BackgroundColor = UIColor.White;

			// Image
			CGRect imageFrame = new CGRect(15, headerHeight - 40 - 8, 40, 40);
			UIImageView imageView = new UIImageView(imageFrame);
			imageView.Image = UIImage.FromFile(structureSection.image);

			headerView.AddSubview(imageView);

            // Label
			CGRect labelFrame = new CGRect(63, 12, tableView.Bounds.Size.Width - 10, headerHeight - 9);
            UILabel label = new UILabel(labelFrame);
            label.Font = UIFont.SystemFontOfSize(17.0f, UIFontWeight.Medium);
			label.TextColor = ColorConst.textColor;
			label.Text = structureSection.description;

            headerView.AddSubview(label);

			// Separator line
			CGRect viewFrame = new CGRect(0, headerHeight - 1, tableView.Bounds.Size.Width, 1);
			UIView separatorLine = new UIView(viewFrame);
			separatorLine.BackgroundColor = ColorConst.separatorColor;

			headerView.AddSubview(separatorLine);

            return headerView;
        }
        
        public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath)
        {
            const string cellIdentifier1 = "cellId1";
			const string cellIdentifier2 = "cellId2";

			int section = indexPath.Section;
			int row = indexPath.Row;

			StructureElementDto structureElement = null;

			if (sectionsWithRows.structureSectionList != null && sectionsWithRows.structureSectionList.Count > 0)
			{
				StructureSectionDto structureSection = sectionsWithRows.structureSectionList[(int)section];

				if (structureSection.structureElementList != null && structureSection.structureElementList.Count > 0)
				{
					structureElement = structureSection.structureElementList[row];
				}
			}

			if (structureElement == null)
				return 0;

			if(structureElement.elementType == StructureElementDto.ElementType.Normal)
			{
				MainNormalRowViewCell mainNormalRowViewCell = tableView.DequeueReusableCell(cellIdentifier1) as MainNormalRowViewCell;
				return mainNormalRowViewCell.Bounds.Height;
			}
			else
			{
				MainLocationRowViewCell mainLocationRowViewCell = tableView.DequeueReusableCell(cellIdentifier2) as MainLocationRowViewCell;

				if (mainLocationRowViewCell.LabLabelBottom.Text != null)
                {
					NSString cellText = new NSString(mainLocationRowViewCell.LabLabelBottom.Text);
					UIFont font = mainLocationRowViewCell.LabLabelBottom.Font;
                    float width = (float)tableView.Frame.Width - 63.0f - 15.0f;

                    CGSize constraintSize = new CGSize(width, float.MaxValue);
                    CGSize labelSize = cellText.StringSize(font, constraintSize, UILineBreakMode.WordWrap);
					return labelSize.Height + (78 - 21);
                }
				else
				{
					return 0;
				}
			}
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
			const string cellIdentifier1 = "cellId1";
            const string cellIdentifier2 = "cellId2";

            int section = indexPath.Section;
            int row = indexPath.Row;

            StructureElementDto structureElement = null;

            if (sectionsWithRows.structureSectionList != null && sectionsWithRows.structureSectionList.Count > 0)
            {
                StructureSectionDto structureSection = sectionsWithRows.structureSectionList[(int)section];

                if (structureSection.structureElementList != null && structureSection.structureElementList.Count > 0)
                {
                    structureElement = structureSection.structureElementList[row];
                }
            }

            if (structureElement == null)
                return null;

            if (structureElement.elementType == StructureElementDto.ElementType.Normal)
            {
				// Normal row
                MainNormalRowViewCell mainNormalRowViewCell = tableView.DequeueReusableCell(cellIdentifier1) as MainNormalRowViewCell;

				mainNormalRowViewCell.LabLabel.TextColor = ColorConst.textColor;
				mainNormalRowViewCell.LabLabel.Text = structureElement.description;

				mainNormalRowViewCell.ImgImage.Image = UIImage.FromFile(structureElement.image);

				nfloat width = mainNormalRowViewCell.ViewImage.Frame.Width * structureElement.percent;
				nfloat height = mainNormalRowViewCell.ViewImage.Frame.Height * structureElement.percent;
				nfloat x = (mainNormalRowViewCell.ViewImage.Frame.Width / 2) - (width / 2);
				nfloat y = (mainNormalRowViewCell.ViewImage.Frame.Height / 2) - (height / 2);

				mainNormalRowViewCell.ImgImage.Frame = new CGRect(x, y, width, height);

				return mainNormalRowViewCell;
            }
            else
            {
				// Location row
                MainLocationRowViewCell mainLocationRowViewCell = tableView.DequeueReusableCell(cellIdentifier2) as MainLocationRowViewCell;

				mainLocationRowViewCell.LabLabelTop.TextColor = ColorConst.textColor;
				mainLocationRowViewCell.LabLabelTop.Text = structureElement.description;

				mainLocationRowViewCell.LabLabelBottom.TextColor = ColorConst.textGrayColor;
				mainLocationRowViewCell.LabLabelBottom.Text = "Generert tekst her";

				mainLocationRowViewCell.ImgImage.Image = UIImage.FromFile(structureElement.image);

				nfloat width = mainLocationRowViewCell.ViewImage.Frame.Width * structureElement.percent;
				nfloat height = mainLocationRowViewCell.ViewImage.Frame.Height * structureElement.percent;
				nfloat x = (mainLocationRowViewCell.ViewImage.Frame.Width / 2) - (width / 2);
				nfloat y = (mainLocationRowViewCell.ViewImage.Frame.Height / 2) - (height / 2);
                                                
				mainLocationRowViewCell.ImgImage.Frame = new CGRect(x, y, width, height);

				return mainLocationRowViewCell;
            }
        }
    }
}