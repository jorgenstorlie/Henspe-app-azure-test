// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using Henspe.iOS.Util;
using MapKit;
using UIKit;

namespace Henspe.iOS
{
	public partial class MapViewController : UIViewController
	{
		public MapViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            SetupView();
        }

        private void SetupView()
        {
            SetupNavigationBar();
            SetupMap();
        }

        private void SetupNavigationBar()
        {
        }

        private void SetupMap()
        {
            map.ShowsUserLocation = true;
            map.ZoomEnabled = true;
            map.ScrollEnabled = true;
            //map.Delegate = new MapDelegate(this, map); JØRGEN, DENNE MÅ INN. Koden ligger nederst. Kommenter ut den også. Må gjøres om til veikameraer.
            map.RotateEnabled = false;
            map.ShowsCompass = false;
            map.IsAccessibilityElement = false;
            map.AccessibilityElementsHidden = true;

            SVGUtil.LoadSVGToButton(btnMapType, "ic_btn_map_toggle_up.svg", "ic_btn_map_toggle_down.svg", "ic_btn_map_toggle_down.svg");
            SVGUtil.LoadSVGToButton(btnZoomHome, "ic_btn_map_center_up.svg", "ic_btn_map_center_down.svg");

            btnMapType.Hidden = false;
            btnZoomHome.Hidden = false;
        }

        partial void OnBtnMapTypeClicked(NSObject sender)
        {
        }

        partial void OnBtnZoomHomeClicked(NSObject sender)
        {
        }
    }

    /*
    class MapDelegate : MKMapViewDelegate
    {
        public WeakReference<MapViewController> _parent;

        private UITapGestureRecognizer tapMapGesture;
        private WeakReference<MKMapView> _mapView = null;
        public HjertestarterAnnotation _clickedHjertestarterAnnotation = null;
        private HjertestarterAnnotation _clickedPrevioushjertestarterAnnotation = null;

        private nfloat poiAnnotationWidth = 30;
        private nfloat poiAnnotationHeight = 30;

        // Clustering
        private FBClusteringManager clusteringManager;
        private bool _dontFireAnnotationSelect;
        private const string kClusterAnnotationId = "REUSABLE_CLUSTER_ANNOTATION_ID";
        private const string kPinAnnotationId = "REUSABLE_PIN_ANNOTATION_ID";
        private const int kTagClusterLabel = 1;

        private readonly Dictionary<double, MKAnnotation> _annotations = new Dictionary<double, MKAnnotation>();

        private UIImageView calloutImageView;
        private UIImage calloutImage;
        private UILabel myTitle;
        private UILabel mySubtitle;
        private UILabel mySubSubtitle;
        private UILabel mySubSubSubtitle;

        public MapDelegate(MapViewController _mapController, MKMapView mapView)
        {
            _parent = new WeakReference<MapViewController>(_mapController);
            _mapView = new WeakReference<MKMapView>(mapView);

            tapMapGesture = new UITapGestureRecognizer(OnMapTouched);
            tapMapGesture.NumberOfTapsRequired = 1;
            tapMapGesture.CancelsTouchesInView = false;
            mapView.AddGestureRecognizer(tapMapGesture);

            SetupClustering();
        }

        private void SetupClustering()
        {
            clusteringManager = new FBClusteringManager(new List<IMKAnnotation>());
        }

        private void OnMapTouched(UITapGestureRecognizer tap)
        {
            _dontFireAnnotationSelect = false;

            CGPoint touchPoint = tap.LocationInView(null);

            _clickedHjertestarterAnnotation = null;

            AppDelegate.current.currentHjertestarter = null;

            if (!_mapView.TryGetTarget(out MKMapView map))
                return;

            if (calloutImageView != null)
            {
                calloutImageView.RemoveFromSuperview();
                calloutImageView.Dispose();
                calloutImageView = null;
            }

            if (myTitle != null)
            {
                myTitle.RemoveFromSuperview();
                myTitle.Dispose();
                myTitle = null;
            }

            if (mySubtitle != null)
            {
                mySubtitle.RemoveFromSuperview();
                mySubtitle.Dispose();
                mySubtitle = null;
            }

            if (mySubSubtitle != null)
            {
                mySubSubtitle.RemoveFromSuperview();
                mySubSubtitle.Dispose();
                mySubSubtitle = null;
            }

            if (mySubSubSubtitle != null)
            {
                mySubSubSubtitle.RemoveFromSuperview();
                mySubSubSubtitle.Dispose();
                mySubSubSubtitle = null;
            }

            foreach (IMKAnnotation annotation in map.Annotations)
            {
                if (annotation is HjertestarterAnnotation)
                {
                    HjertestarterAnnotation hjertestarterAnnotation = annotation as HjertestarterAnnotation;
                    MKAnnotationView annotationView = map.ViewForAnnotation(hjertestarterAnnotation);
                    if (annotationView != null)
                    {
                        if (annotationView.Frame.Contains(touchPoint))
                        {
                            if (annotation is HjertestarterAnnotation)
                            {
                                _clickedHjertestarterAnnotation = annotation as HjertestarterAnnotation;
                                break;
                            }
                        }
                    }
                }
            }

            //Clicked the same annotation
            if (_clickedHjertestarterAnnotation != null && _clickedPrevioushjertestarterAnnotation != null && _clickedHjertestarterAnnotation == _clickedPrevioushjertestarterAnnotation)
                return;

            if (_clickedPrevioushjertestarterAnnotation != null)
            {
                var view = map.ViewForAnnotation(_clickedPrevioushjertestarterAnnotation);
                if (view != null)
                {
                    string assetGuid = string.Empty;

                    if (_clickedHjertestarterAnnotation != null)
                        assetGuid = _clickedHjertestarterAnnotation.hjertestarter.assetGuid;

                    SetHjertestarterAnnotationImage(view, _clickedPrevioushjertestarterAnnotation.hjertestarter, assetGuid);
                    SetDefaultHjertestarterFrame(view);
                }
            }

            if (_clickedHjertestarterAnnotation != null)
            {
                var view = map.ViewForAnnotation(_clickedHjertestarterAnnotation);
                if (view != null)
                    SetHjertestarterAnnotationImage(view, _clickedHjertestarterAnnotation.hjertestarter, _clickedHjertestarterAnnotation.hjertestarter.assetGuid);
            }

            if (_clickedHjertestarterAnnotation == null)
            {
                if (_parent.TryGetTarget(out MapViewController parent))
                {
                    _dontFireAnnotationSelect = true;

                    bool isInfoClosed = UserUtil.credentials.isInfoClosed;
                    bool isInfoOpen = !isInfoClosed;

                    InvokeOnMainThread(delegate
                    {
                        NSDictionary parameters = new NSDictionary("showInfo", SubView.infoLocation);
                        NSNotificationCenter.DefaultCenter.PostNotificationName(EventConst.showTopInfo, this, parameters);
                    });
                }
            }

            _clickedPrevioushjertestarterAnnotation = null;
        }

        public override void DidFinishRenderingMap(MKMapView mapView, bool fullyRendered)
        {
            MapViewController parent;
            if (_parent.TryGetTarget(out parent))
            {
                //parent.mapFinishedRendering = true;
                //parent.DoMapZoomIfAllReadyAndNotAlreadyDoneAndMemeberNotVisibleForNonNRDBVersion();
            }
        }

        public void AddOrUpdateHjertestartersInMap(Dictionary<double, Hjertestarter> hjertestarters)
        {
            List<IMKAnnotation> hjertestarterAnnotationsToAdd = new List<IMKAnnotation>();
            List<IMKAnnotation> hjertestarterAnnotationsToRemove = new List<IMKAnnotation>();

            if (!_mapView.TryGetTarget(out MKMapView map))
                return;

            // Update the annotations already in map
            foreach (IMKAnnotation annotation in map.Annotations)
            {
                if (annotation is HjertestarterAnnotation hjertestarterAnnotation)
                {
                    if (hjertestarters.ContainsKey(hjertestarterAnnotation.hjertestarter.assetId))
                    {
                        var hjertestarter = hjertestarters[hjertestarterAnnotation.hjertestarter.assetId];
                        if (hjertestarter == null)
                        {
                            hjertestarterAnnotationsToRemove.Add(hjertestarterAnnotation);
                        }
                        else
                        {
                            //var newAnnotation = new HjertestarterAnnotation(hjertestarter);
                            //hjertestarterAnnotationsToAdd.Add(newAnnotation);
                        }

                        hjertestarters.Remove(hjertestarterAnnotation.hjertestarter.assetId);
                    }
                }
            }

            // The hjertestarters that are not updated, will be added to the map
            foreach (var keyValuePair in hjertestarters)
            {
                if (!_annotations.ContainsKey(keyValuePair.Key))
                {
                    var hjertestarter = keyValuePair.Value;
                    var bah = new HjertestarterAnnotation(hjertestarter);
                    _annotations.Add(keyValuePair.Key, bah);
                    hjertestarterAnnotationsToAdd.Add(bah);
                }
            }

            map.RemoveAnnotations(hjertestarterAnnotationsToRemove.ToArray());
            map.AddAnnotations(hjertestarterAnnotationsToAdd.ToArray());

            clusteringManager.AddAnnotations(hjertestarterAnnotationsToAdd);
            clusteringManager.RemoveAnnotations(hjertestarterAnnotationsToRemove);

            RefreshClustering();
        }

        public void RefreshClustering()
        {
            InvokeOnMainThread(() =>
            {
                if (!_mapView.TryGetTarget(out MKMapView map))
                    return;

                double scale = map.Bounds.Size.Width / map.VisibleMapRect.Size.Width;
                List<IMKAnnotation> annotationsToDisplay = clusteringManager.ClusteredAnnotationsWithinMapRect(map.VisibleMapRect, scale);
                clusteringManager.DisplayAnnotations(annotationsToDisplay, map);
            });
        }

        public void UnselectClickedHjertestarter()
        {
            if (!_mapView.TryGetTarget(out MKMapView map))
                return;

            if (_clickedHjertestarterAnnotation != null)
            {
                var currentView = map.ViewForAnnotation(_clickedHjertestarterAnnotation);
                if (currentView != null)
                {
                    map.DeselectAnnotation(_clickedHjertestarterAnnotation, true);
                    SetHjertestarterAnnotationImage(currentView, _clickedHjertestarterAnnotation.hjertestarter, string.Empty);
                    SetDefaultHjertestarterFrame(currentView);
                }
            }

            Reset();
        }

        public void Reset()
        {
            _clickedHjertestarterAnnotation = null;
            _clickedPrevioushjertestarterAnnotation = null;
        }

        public override MKAnnotationView GetViewForAnnotation(MKMapView mapView, IMKAnnotation annotation)
        {
            var customAnnotation = Runtime.GetNSObject(annotation.Handle);

            if (customAnnotation is MKUserLocation)
            {
                //MKAnnotationView userLocationView = new MKAnnotationView(customAnnotation as MKAnnotation, "customAnnotation");
                return null;
            }

            if (annotation is HjertestarterAnnotation)
            {
                // show annotation
                MKAnnotationView hjertestarterAnnotationView = mapView.DequeueReusableAnnotation(POIConst.hjertestarterAnnotation);

                if (hjertestarterAnnotationView == null)
                    hjertestarterAnnotationView = new MKAnnotationView(annotation, POIConst.hjertestarterAnnotation);
                else
                    hjertestarterAnnotationView.Annotation = annotation;

                var hjertestarter = (annotation as HjertestarterAnnotation).hjertestarter;

                string assetGuid = "";

                if (_clickedHjertestarterAnnotation != null && _clickedHjertestarterAnnotation.hjertestarter != null && _clickedHjertestarterAnnotation.hjertestarter.assetGuid != null)
                    assetGuid = _clickedHjertestarterAnnotation.hjertestarter.assetGuid;

                SetHjertestarterAnnotationImage(hjertestarterAnnotationView, hjertestarter, assetGuid);

                SetDefaultHjertestarterFrame(hjertestarterAnnotationView);

                return hjertestarterAnnotationView;
            }
            else if (annotation is FBAnnotationCluster)
            {
                MKAnnotationView anView;

                FBAnnotationCluster annotationcluster = (FBAnnotationCluster)annotation;
                anView = (MKAnnotationView)mapView.DequeueReusableAnnotation(kClusterAnnotationId);

                UILabel label = null;
                if (anView == null)
                {
                    // nicely format the cluster icon and display the number of items in it
                    anView = new MKAnnotationView(annotation, kClusterAnnotationId);
                    anView.Image = UIImage.FromBundle("ic_cluster");

                    label = new UILabel(new CGRect(0, 0, anView.Image.Size.Width, anView.Image.Size.Height));
                    label.Tag = kTagClusterLabel;
                    label.TextAlignment = UITextAlignment.Center;
                    label.TextColor = UIColor.White;

                    anView.AddSubview(label);
                    anView.CanShowCallout = false;
                }
                else
                {
                    label = (UILabel)anView.ViewWithTag(kTagClusterLabel);
                }

                label.Text = annotationcluster.Annotations.Count.ToString();

                return anView;
            }

            return null;
        }

        public void SetDefaultHjertestarterFrame(MKAnnotationView hjertestarterAnnotationView)
        {
            CGRect newFrame = new CGRect(hjertestarterAnnotationView.Frame.X, hjertestarterAnnotationView.Frame.Y, poiAnnotationWidth, poiAnnotationHeight);
            hjertestarterAnnotationView.Frame = newFrame;
            hjertestarterAnnotationView.CanShowCallout = false;        // enable disable callout.
            SetAnchorPointForAnnotation(hjertestarterAnnotationView);
        }

        public void SetHjertestarterAnnotationImage(MKAnnotationView hjertestarterAnnotationView, Hjertestarter hjertestarter, string selectedAssetGuid)
        {
            if (hjertestarter.IsOpen())
            {
                if (hjertestarter.assetGuid == selectedAssetGuid)
                    hjertestarterAnnotationView.Image = UIImage.FromBundle("ic_heart_map_down.png");
                else
                    hjertestarterAnnotationView.Image = UIImage.FromBundle("ic_heart_map_up.png");
            }
            else
            {
                if (hjertestarter.assetGuid == selectedAssetGuid)
                    hjertestarterAnnotationView.Image = UIImage.FromBundle("ic_heart_map_closed_down.png");
                else
                    hjertestarterAnnotationView.Image = UIImage.FromBundle("ic_heart_map_up_closed.png");
            }
        }

        static void SetAnchorPointForAnnotation(MKAnnotationView anView)
        {
            nfloat x = anView.Center.X;
            nfloat y = anView.Center.Y;
            nfloat width = anView.Frame.Width;
            nfloat height = anView.Frame.Height;

            anView.CenterOffset = new CGPoint(0, -height / 2);
        }

        public override void DidSelectAnnotationView(MKMapView mapView, MKAnnotationView view)
        {
            if (_dontFireAnnotationSelect)
            {
                Reset();

                var customAnnotation = Runtime.GetNSObject(view.Annotation.Handle);

                if (view.Annotation is HjertestarterAnnotation)
                {
                    InvokeOnMainThread(() =>
                    {
                        mapView.DeselectAnnotation(view.Annotation, false);
                    });
                }
                else if (customAnnotation is MKUserLocation)
                {
                    view.CanShowCallout = true;

                    nfloat width = 446;

                    string latitudeText = AppDelegate.current.locationManager.gpsCurrentPositionObject.latitudeDescription;
                    string longitudeText = AppDelegate.current.locationManager.gpsCurrentPositionObject.longitudeDescription;

                    string accuracyLarge = AppDelegate.current.locationManager.gpsCurrentPositionObject.accuracy + " " + LangUtil.Get("Hjelp113.iOS.Element.Meters.Text");
                    string accuracySmall = LangUtil.Get("Hjelp113.iOS.MainViewController.Accuracy.Text") + ": " + AppDelegate.current.locationManager.gpsCurrentPositionObject.accuracy + " " + LangUtil.Get("Hjelp113.iOS.Element.Meters.Text");

                    string time = LangUtil.Get("Hjelp113.iOS.MainViewController.Time.Text") + ": " + DateUtil.ConvertDateTimeToDateString(AppDelegate.current.locationManager.gpsCurrentPositionObject.storedDateTime, "HH:mm");

                    UILabel customLabel = new UILabel(new CGRect(0, 0, width, 45));
                    customLabel.Font = FontConst.fontTinyLight;
                    customLabel.TextAlignment = UITextAlignment.Center;
                    customLabel.Text = latitudeText + "\n" + longitudeText + "\n" + accuracySmall + "\n" + time;
                    customLabel.TextColor = ColorConst.snlaText;
                    customLabel.AdjustsFontSizeToFitWidth = true;
                    customLabel.Lines = 0;
                    customLabel.MinimumScaleFactor = 0.5f;

                    NSLayoutConstraint constraintWidth = NSLayoutConstraint.Create(customLabel, NSLayoutAttribute.Width, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 200);
                    customLabel.AddConstraint(constraintWidth);

                    view.DetailCalloutAccessoryView = customLabel;

                    InvokeOnMainThread(delegate
                    {
                        NSNotificationCenter.DefaultCenter.PostNotificationName(EventConst.centerCurrentLocation, this);
                    });
                }

                return;
            }

            InvokeOnMainThread(() =>
            {
                if (view.Annotation is HjertestarterAnnotation)
                {
                    hjertestarterSelected(mapView, view);
                }
            });

            // bring clicked to front
            view.Layer.ZPosition = 20;
        }

        private void hjertestarterSelected(MKMapView mapView, MKAnnotationView annotationView)
        {
            // hjertestarter clicked
            HjertestarterAnnotation hjertestarterAnnotation = annotationView.Annotation as HjertestarterAnnotation;
            _clickedPrevioushjertestarterAnnotation = _clickedHjertestarterAnnotation;
            _clickedHjertestarterAnnotation = hjertestarterAnnotation;

            if (_clickedHjertestarterAnnotation != null && _clickedHjertestarterAnnotation.hjertestarter != null)
            {
                Hjertestarter clickedhjertestarter = _clickedHjertestarterAnnotation.hjertestarter;

                AppDelegate.current.currentHjertestarter = clickedhjertestarter;

                InvokeOnMainThread(() =>
                {
                    NSNotificationCenter.DefaultCenter.PostNotificationName(EventConst.expand, this);
                    ShowhjertestarterInfo(clickedhjertestarter);
                });
            }
        }

        private void ShowhjertestarterInfo(Hjertestarter clickedhjertestarter)
        {
            InvokeOnMainThread(delegate
            {
                AppDelegate.current.currentHjertestarter = clickedhjertestarter;
                NSNotificationCenter.DefaultCenter.PostNotificationName(EventConst.hjertestarterSelected, this);
            });
        }

        static public void CenterToCoordinateAdjusted(MKMapView mapView, CLLocationCoordinate2D coordinate, bool animate)
        {
            if (!coordinate.IsValid())
                return;

            float percentAboveMiddle = 7;

            MKCoordinateRegion region = mapView.Region;
            double latitudeJust = (region.Span.LatitudeDelta * percentAboveMiddle) / 100;
            CLLocationCoordinate2D clLocationCoordinate2DJust = new CLLocationCoordinate2D(coordinate.Latitude - latitudeJust, coordinate.Longitude);

            mapView.SetCenterCoordinate(clLocationCoordinate2DJust, animate);
        }

        public override void DidDeselectAnnotationView(MKMapView mapView, MKAnnotationView view)
        {
            //RemoveAllAnnotationFromView(mapView);

            if (view.Annotation is HjertestarterAnnotation)
            {
            }
        }

        //private void RemoveAnnotationFromView(MKMapView mapView, MKAnnotationView view) {
        public void RemoveAllAnnotationFromView(MKMapView mapView)
        {
            // remove tap map recognizer
            if (mapView != null)
            {
                if (tapMapGesture != null)
                    mapView.RemoveGestureRecognizer(tapMapGesture);
            }
        }

        // when map moved (panned).
        public override void RegionChanged(MKMapView mapView, bool animated)
        {
            if (AppDelegate.current.locationManager.mapZoomDone == true)
            {
                MapViewController parent;
                if (_parent.TryGetTarget(out parent))
                {
                    parent.ShowHjertestarters();
                }
            }
        }
    }
*/
}