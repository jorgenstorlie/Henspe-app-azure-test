// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreLocation;
using Foundation;
using Henspe.Core.Const;
using Henspe.iOS.AppModel;
using Henspe.iOS.Const;
using Henspe.iOS.Util;
using UIKit;

namespace Henspe.iOS
{
    public partial class MainViewController : UIViewController
	{
		private MainListTableViewSource mainListTableViewSource = null;

		// Events
		NSObject observerActivatedOccured;

        private UIStringAttributes normalText = new UIStringAttributes
		{
            ForegroundColor = ColorConst.textColor,
			Font = FontConst.fontMedium
		};

		public MainViewController(IntPtr handle) : base(handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			SetupNavigationBar();
			SetupView();

			// Events
			observerActivatedOccured = NSNotificationCenter.DefaultCenter.AddObserver(new NSString(EventConst.appActivated), HandleActivatedOccured);
		}

		public void HandleActivatedOccured(NSNotification notification)
        {
			if(AppDelegate.current.gpsCurrentPositionObject != null && AppDelegate.current.currentLocation != null)
				AppDelegate.current.gpsCurrentPositionObject.gpsCoordinates = AppDelegate.current.currentLocation.Coordinate;

            RefreshPositionAndAddressRows();
        }

		private void SetupNavigationBar()
		{
			// Transparent background
			UIImage emptyImage = new UIImage();
			this.NavigationController.NavigationBar.Translucent = true;
			this.NavigationController.NavigationBar.SetBackgroundImage(emptyImage, UIBarMetrics.Default);
			this.NavigationController.NavigationBar.ShadowImage = emptyImage;

            // Logo
			UIImage imgLogo = UIImage.FromFile("ic_snla.png");
			UIImageView imgViewLogo = new UIImageView(imgLogo);
			this.NavigationItem.TitleView = imgViewLogo;
		}

		partial void OnSettingsClicked(NSObject sender)
		{
			UIApplication.SharedApplication.OpenUrl(new NSUrl(UIApplication.OpenSettingsUrlString));
		}

		/*
        public void HandleActivatedOccured(NSNotification notification)
        {
            DoCallKystvarsel();
        }
        */

		public override void ViewDidUnload()
		{
			base.ViewDidUnload();
		}

		public override void WillMoveToParentViewController(UIViewController parent)
		{
			base.WillMoveToParentViewController(parent);
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

            btnHelpUs.Layer.BorderColor = btnHelpUs.TitleColor(UIControlState.Normal).CGColor;
            btnHelpUs.Layer.BorderWidth = 1;
            btnHelpUs.Layer.CornerRadius = 5.0f;

            View.BackgroundColor = ColorConst.backgroundColor;
		}

		public override void ViewDidAppear(bool animated)
		{
			//base.ViewDidAppear(animated);

			StartGPSIfNotStartedAlreadyAfterActivated();
			//SetupGlowTimers();
		}

		private void StartGPSIfNotStartedAlreadyAfterActivated()
		{
			AppDelegate.current.gpsStatus = CLLocationManager.Status;

			if (AppDelegate.current.gpsStarted == false)
			{
				// GPG motor was not started. Restart it.
				StartGPSTracking();
			}
		}

		public override void ViewWillDisappear(bool animated)
		{
			base.ViewWillDisappear(animated);
		}

		private void SetupView()
		{
			ResetGPSVariables();

			// Table setup
			mainListTableViewSource = new MainListTableViewSource(this);
			myTableView.Source = mainListTableViewSource;
			myTableView.BackgroundColor = UIColor.Clear;
            myTableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;

            myTableView.RowHeight = UITableView.AutomaticDimension;
            myTableView.EstimatedRowHeight = 50;

			AutomaticallyAdjustsScrollViewInsets = false;

			UIEdgeInsets insets = new UIEdgeInsets(0, 0, 100, 0);
			myTableView.ContentInset = insets;

			mainListTableViewSource.sectionsWithRows = AppDelegate.current.structure;

			myTableView.ReloadData();
		}

		private void ResetGPSVariables()
		{
			AppDelegate.current.gpsPosFound = false;
			AppDelegate.current.currentLocation = null;
			AppDelegate.current.lastAddressLocation = null;
		}

		#region GPS
		private void StartGPSTracking()
		{
			if (AppDelegate.current.iPhoneLocationManager == null)
			{
				AppDelegate.current.iPhoneLocationManager = new CLLocationManager
				{
					ActivityType = CLActivityType.OtherNavigation,
				};
			}
			else
			{
				AppDelegate.current.iPhoneLocationManager.StopUpdatingLocation();
			}

			AppDelegate.current.iPhoneLocationManager.DesiredAccuracy = AppDelegate.current.desiredAccuracy;
			AppDelegate.current.iPhoneLocationManager.DistanceFilter = AppDelegate.current.distanceFilter;

			if (UIDevice.CurrentDevice.CheckSystemVersion(6, 0))
			{
				AppDelegate.current.iPhoneLocationManager.LocationsUpdated += HandleLocationsUpdated;
			}
			else
			{
				// This will not be called on iOS 6. Depricated
			}

			// iOS 8 requires you to manually request authorization
			if (UIDevice.CurrentDevice.CheckSystemVersion(8, 0))
			{
				AppDelegate.current.iPhoneLocationManager.RequestWhenInUseAuthorization();
			}

			AppDelegate.current.gpsStatus = CLLocationManager.Status;

            // start updating our location, et. al.
            if (CLLocationManager.Status != CLAuthorizationStatus.NotDetermined &&
                CLLocationManager.Status != CLAuthorizationStatus.Authorized &&
                CLLocationManager.Status != CLAuthorizationStatus.AuthorizedAlways &&
                CLLocationManager.Status != CLAuthorizationStatus.AuthorizedWhenInUse)
            {
                // Something is wrong with the GPS grant
                AppDelegate.current.gpsStarted = false;

                InvokeOnMainThread(delegate
                {
                    var alert = UIAlertController.Create(LangUtil.Get("Alert.Title.Warning"),
                                                                       LangUtil.Get("GPS.NoAccessToGPS.Message"),
                                                                       UIAlertControllerStyle.Alert);
                    UIAlertAction.Create(LangUtil.Get("Alert.OK"), UIAlertActionStyle.Default, (a) =>
                    {
                        AppDelegate.current.iPhoneLocationManager.StopUpdatingLocation();
                    });
                    PresentViewController(alert, true, null);
                });
            }
			else if (CLLocationManager.LocationServicesEnabled)
			{
				AppDelegate.current.iPhoneLocationManager.StartUpdatingLocation();
				AppDelegate.current.gpsStarted = true;
			}
		}

		private void HandleLocationsUpdated(object sender, CLLocationsUpdatedEventArgs e)
		{
			UpdateLocation(e);
		}

		private void UpdateLocation(CLLocationsUpdatedEventArgs e)
		{
			if (AppDelegate.current.iPhoneLocationManager != null)
			{
				AppDelegate.current.gpsPosFound = true;

				AppDelegate.current.currentLocation = e.Locations[e.Locations.Length - 1];

                // Debug
                //AppDelegate.current.currentLocation = new CLLocation(59.9155646, 10.6075103);

				double roundedLatitude = Math.Floor(AppDelegate.current.currentLocation.Coordinate.Latitude);
				double roundedLongitude = Math.Floor(AppDelegate.current.currentLocation.Coordinate.Longitude);

				// If location is cupertino, we are in simulator. Lets set it to Norway to speed things up
				if (AppDelegate.current.roundedLatitude == POIConst.cupertinoLatitude && AppDelegate.current.roundedLongitude == POIConst.cupertinoLongitude)
				{
					AppDelegate.current.currentLocation = new CLLocation(POIConst.stabekkLatitude, POIConst.stabekkLongitude);
				}

				int previousGpsCoverage = AppDelegate.current.gpsCoverage;
				int newGpsCoverage = GpsCoverageConst.none;

				newGpsCoverage = iOSMapUtil.GetAccuracyType(AppDelegate.current.currentLocation.HorizontalAccuracy, AppDelegate.current.highAndLowAccuracyDivider, GpsCoverageConst.low, GpsCoverageConst.high);

				AppDelegate.current.gpsCoverage = newGpsCoverage;

				GPSObject gpsObject = new GPSObject();
				gpsObject.accuracy = AppDelegate.current.currentLocation.HorizontalAccuracy;
				gpsObject.gpsCoordinates = AppDelegate.current.currentLocation.Coordinate;
				gpsObject.storedDateTime = DateTime.Now;
				AppDelegate.current.gpsCurrentPositionObject = gpsObject;

				AppDelegate.current.gpsEventOccured = true;

				NSNotificationCenter.DefaultCenter.PostNotificationName(EventConst.gpsEvent, this);

				if (AppDelegate.current.currentLocation.HorizontalAccuracy <= AppDelegate.current.gpsAccuracyRequirement)
				{
					SetupPosition(PositionTypeConst.found);
				}
				else
				{
					SetupPosition(PositionTypeConst.finding);
				}

				//Console.WriteLine ("Location updated");
				bool positionSignificantlyChanged = UpdateGPSPositionAndAlsoAddressIfSignificantChange();
			}
			else
			{
				StartGPSTracking();
			}
		}

        private void SetupPosition(int found)
        {
            //throw new NotImplementedException();
        }

        private bool UpdateGPSPositionAndAlsoAddressIfSignificantChange()
		{
			double lat1 = AppDelegate.current.currentLocation.Coordinate.Latitude;
			double lon1 = AppDelegate.current.currentLocation.Coordinate.Longitude;
			double lat2 = 0;
			double lon2 = 0;

			if (AppDelegate.current.lastAddressLocation != null)
			{
				lat2 = AppDelegate.current.lastAddressLocation.Coordinate.Latitude;
				lon2 = AppDelegate.current.lastAddressLocation.Coordinate.Longitude;
			}

			if (iOSMapUtil.Distance(lat1, lon1, lat2, lon2) > AppDelegate.current.distanceToUpdateAddress || (lat2 == 0 && lon2 == 0))
			{
				AppDelegate.current.lastAddressLocation = AppDelegate.current.currentLocation;

                RefreshPositionAndAddressRows();

				return true;
			}

			return false;
		}

        private void RefreshPositionRow()
		{
			RefreshTableRow(1, MainListTableViewSource.LocationRow);
		}

		private void RefreshAddressRow()
        {
            RefreshTableRow(1, MainListTableViewSource.AddressRow);
        }

        public void RefreshPositionAndAddressRows()
        {
            NSIndexPath[] indexPathList = { 
                NSIndexPath.FromRowSection(MainListTableViewSource.LocationRow, 1),
                NSIndexPath.FromRowSection(MainListTableViewSource.AddressRow, 1),
            };
            myTableView.ReloadRows(indexPathList, UITableViewRowAnimation.Fade);
        }

        private void RefreshTableRow(int section, int row)
        {
			NSIndexPath[] indexPathList = new NSIndexPath[] { NSIndexPath.FromRowSection(row, section) };
			myTableView.ReloadRows(indexPathList, UITableViewRowAnimation.Fade);
        }
		#endregion


		partial void OnInfoClicked(NSObject sender)
		{
			InvokeOnMainThread(() =>
            {
                this.PerformSegue("segueInit", this);
            });
		}

		public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
			if (segue.Identifier == "segueInit")
            {
				UserUtil.settings.instructionsFinished = false;
            }
        }
	}
}