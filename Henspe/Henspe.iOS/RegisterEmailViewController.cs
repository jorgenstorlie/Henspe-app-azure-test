// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Text.RegularExpressions;
using CoreFoundation;
using Foundation;
using Henspe.Core.ViewModel;
using Henspe.iOS.Const;
using Henspe.iOS.Util;
using UIKit;

namespace Henspe.iOS
{
	public partial class RegisterEmailViewController : UIViewController
	{
        private RegisterEmailViewModel _viewmodel = new RegisterEmailViewModel();

        public RegisterEmailViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            _viewmodel.Init(RegisterEmailViewModel.OS.iOS, LangUtil.Get("RegEmail.Failed"));
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            Title = LangUtil.Get("RegEmail.Title");

            lblNewsletter.Text = LangUtil.Get("RegEmail.Description");
            lblNewsletter.TextColor = ColorConst.textColor;
            lblNewsletter.Font = FontConst.fontMedium;

            txtEmail.Placeholder = LangUtil.Get("RegEmail.Placeholder");
            txtEmail.EditingChanged += TxtEmail_EditingChanged;

            btnOK.Enabled = false;
            btnOK.Layer.CornerRadius = 5;
            btnOK.SetTitle(LangUtil.Get("RegEmail.Button"), UIControlState.Normal);
            btnOK.SetTitleColor(UIColor.LightTextColor, UIControlState.Normal);
            btnOK.SetTitleColor(UIColor.LightGray, UIControlState.Disabled);
            SVGUtil.LoadSVGToButton(btnOK, "ic_btn_filled_full_width_enabled.svg", "ic_btn_filled_full_width_disabled.svg");
        }

        partial void OKClicked(NSObject sender)
        {
            _viewmodel.RegisterEmailAsync().ContinueWith((result) =>
            {
                BeginInvokeOnMainThread(() =>
                {
                    if (result.Result)
                    {
                        UIAlertController alert = UIAlertController.Create(null, LangUtil.Get("RegEmail.Success"), UIAlertControllerStyle.Alert);
                        PresentViewController(alert, true, null);
                        DispatchQueue.MainQueue.DispatchAfter(new DispatchTime(DispatchTime.Now, new TimeSpan(0, 0, 2)), () =>
                        {
                            alert.DismissViewController(true, () => DismissViewController(true, null));
                        });
                    }
                    else
                    {
                        UIAlertController alert = UIAlertController.Create(null, LangUtil.Get("RegEmail.Failed"), UIAlertControllerStyle.Alert);
                        alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, (a) => alert.DismissViewController(true, null)));
                        PresentViewController(alert, true, null);
                    }
                });
            });
        }

        void TxtEmail_EditingChanged(object sender, EventArgs e)
        {
            _viewmodel.Email = txtEmail.Text;
            btnOK.Enabled = _viewmodel.EnableOKButton;
        }
    }
}
